[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\samae\AppData\Local\Temp\idea7.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\samae\AppData\Local\Temp\idea7.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.6 (Oracle Corporation Java 20.0.2)
[debug]       Load.loadUnit: plugins took 164.5225ms
[debug]       Load.loadUnit: defsScala took 0.4785ms
[debug] [Loading] Scanning directory C:\Users\samae\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\samae\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 34.1496 ms
[debug]           Load.resolveProject(global-plugins) took 115.3788ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\samae\.sbt\1.0\plugins, plugins: List(<none>))) took 184.5812ms
[debug] [Loading] Done in C:\Users\samae\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 254.4952ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.4242ms
[debug]     Load.loadUnit(file:/C:/Users/samae/.sbt/1.0/plugins/, ...) took 445.1078ms
[debug]   Load.apply: load took 773.4576ms
[debug]   Load.apply: resolveProjects took 7.5996ms
[debug]   Load.apply: finalTransforms took 98.4425ms
[debug]   Load.apply: config.delegates took 18.2861ms
[debug]   Load.apply: Def.make(settings)... took 711.8309ms
[debug]   Load.apply: structureIndex took 165.5041ms
[debug]   Load.apply: mkStreams took 3.0863ms
[info] loading global plugins from C:\Users\samae\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3814.756ms
[debug]           Load.loadUnit: plugins took 26.3134ms
[debug]           Load.loadUnit: defsScala took 0.0068ms
[debug] [Loading] Scanning directory C:\Users\samae\Documents\GitHub\Paradigmas\scalaproject\project
[debug]             Load.loadUnit: mkEval took 8.5332ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\samae\Documents\GitHub\Paradigmas\scalaproject\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.9339 ms
[info] loading settings for project scalaproject-build from idea7.sbt ...
[debug]               Load.resolveProject(scalaproject-build) took 3.5082ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scalaproject-build, base: C:\Users\samae\Documents\GitHub\Paradigmas\scalaproject\project, plugins: List(<none>))) took 7.5419ms
[debug] [Loading] Done in C:\Users\samae\Documents\GitHub\Paradigmas\scalaproject\project, returning: (scalaproject-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 152.2654ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.1544ms
[debug]         Load.loadUnit(file:/C:/Users/samae/Documents/GitHub/Paradigmas/scalaproject/project/, ...) took 186.0946ms
[debug]       Load.apply: load took 189.3268ms
[debug]       Load.apply: resolveProjects took 0.3632ms
[debug]       Load.apply: finalTransforms took 15.1601ms
[debug]       Load.apply: config.delegates took 0.66ms
[debug]       Load.apply: Def.make(settings)... took 115.9793ms
[debug]       Load.apply: structureIndex took 37.4049ms
[debug]       Load.apply: mkStreams took 0.0065ms
[info] loading project definition from C:\Users\samae\Documents\GitHub\Paradigmas\scalaproject\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 756.4872ms
[debug]     Load.loadUnit: defsScala took 0.0097ms
[debug] [Loading] Scanning directory C:\Users\samae\Documents\GitHub\Paradigmas\scalaproject
[debug]       Load.loadUnit: mkEval took 1.4611ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.7589 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 25.4918ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\samae\Documents\GitHub\Paradigmas\scalaproject, plugins: List(<none>))) took 30.3213ms
[debug] [Loading] Done in C:\Users\samae\Documents\GitHub\Paradigmas\scalaproject, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 95.4898ms
[debug]     Load.loadUnit: cleanEvalClasses took 4.6881ms
[debug]   Load.loadUnit(file:/C:/Users/samae/Documents/GitHub/Paradigmas/scalaproject/, ...) took 858.3368ms
[debug] Load.apply: load took 861.3627ms
[debug] Load.apply: resolveProjects took 0.1983ms
[debug] Load.apply: finalTransforms took 28.8805ms
[debug] Load.apply: config.delegates took 0.332ms
[debug] Load.apply: Def.make(settings)... took 105.4465ms
[debug] Load.apply: structureIndex took 32.8886ms
[debug] Load.apply: mkStreams took 0.0058ms
[info] set current project to ScalaProject (in build file:/C:/Users/samae/Documents/GitHub/Paradigmas/scalaproject/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 50187 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 50187, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ScalaProject (in build file:/C:/Users/samae/Documents/GitHub/Paradigmas/scalaproject/)
[debug] > Exec(idea-shell, None, None)
