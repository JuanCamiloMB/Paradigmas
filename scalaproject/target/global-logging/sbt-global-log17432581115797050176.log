[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\samae\AppData\Local\Temp\idea2.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\samae\AppData\Local\Temp\idea2.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.6 (Oracle Corporation Java 20.0.2)
[debug]       Load.loadUnit: plugins took 142.4526ms
[debug]       Load.loadUnit: defsScala took 0.3131ms
[debug] [Loading] Scanning directory C:\Users\samae\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\samae\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 21.294 ms
[debug]           Load.resolveProject(global-plugins) took 61.8176ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\samae\.sbt\1.0\plugins, plugins: List(<none>))) took 114.8822ms
[debug] [Loading] Done in C:\Users\samae\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 154.6261ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.4378ms
[debug]     Load.loadUnit(file:/C:/Users/samae/.sbt/1.0/plugins/, ...) took 315.5466ms
[debug]   Load.apply: load took 567.6257ms
[debug]   Load.apply: resolveProjects took 5.8411ms
[debug]   Load.apply: finalTransforms took 82.4368ms
[debug]   Load.apply: config.delegates took 27.8748ms
[debug]   Load.apply: Def.make(settings)... took 683.6739ms
[debug]   Load.apply: structureIndex took 174.6259ms
[debug]   Load.apply: mkStreams took 5.7735ms
[info] loading global plugins from C:\Users\samae\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3478.7602ms
[debug]           Load.loadUnit: plugins took 22.7566ms
[debug]           Load.loadUnit: defsScala took 0.0037ms
[debug] [Loading] Scanning directory C:\Users\samae\Documents\GitHub\Paradigmas\scalaproject\project
[debug]             Load.loadUnit: mkEval took 5.6257ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\samae\Documents\GitHub\Paradigmas\scalaproject\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.0132 ms
[info] loading settings for project scalaproject-build from idea2.sbt ...
[debug]               Load.resolveProject(scalaproject-build) took 2.8623ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scalaproject-build, base: C:\Users\samae\Documents\GitHub\Paradigmas\scalaproject\project, plugins: List(<none>))) took 6.5927ms
[debug] [Loading] Done in C:\Users\samae\Documents\GitHub\Paradigmas\scalaproject\project, returning: (scalaproject-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 127.0815ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.4006ms
[debug]         Load.loadUnit(file:/C:/Users/samae/Documents/GitHub/Paradigmas/scalaproject/project/, ...) took 155.1269ms
[debug]       Load.apply: load took 156.9859ms
[debug]       Load.apply: resolveProjects took 0.1888ms
[debug]       Load.apply: finalTransforms took 11.6598ms
[debug]       Load.apply: config.delegates took 0.5526ms
[debug]       Load.apply: Def.make(settings)... took 106.8631ms
[debug]       Load.apply: structureIndex took 45.963ms
[debug]       Load.apply: mkStreams took 0.0043ms
[info] loading project definition from C:\Users\samae\Documents\GitHub\Paradigmas\scalaproject\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 757.7744ms
[debug]     Load.loadUnit: defsScala took 0.0047ms
[debug] [Loading] Scanning directory C:\Users\samae\Documents\GitHub\Paradigmas\scalaproject
[debug]       Load.loadUnit: mkEval took 0.4811ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.1993 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 32.9651ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\samae\Documents\GitHub\Paradigmas\scalaproject, plugins: List(<none>))) took 37.2275ms
[debug] [Loading] Done in C:\Users\samae\Documents\GitHub\Paradigmas\scalaproject, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 120.616ms
[debug]     Load.loadUnit: cleanEvalClasses took 4.5785ms
[debug]   Load.loadUnit(file:/C:/Users/samae/Documents/GitHub/Paradigmas/scalaproject/, ...) took 884.1202ms
[debug] Load.apply: load took 887.7044ms
[debug] Load.apply: resolveProjects took 0.6562ms
[debug] Load.apply: finalTransforms took 33.3549ms
[debug] Load.apply: config.delegates took 0.345ms
[debug] Load.apply: Def.make(settings)... took 85.4339ms
[debug] Load.apply: structureIndex took 33.7513ms
[debug] Load.apply: mkStreams took 0.0021ms
[info] set current project to ScalaProject (in build file:/C:/Users/samae/Documents/GitHub/Paradigmas/scalaproject/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 50187 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 50187, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ScalaProject (in build file:/C:/Users/samae/Documents/GitHub/Paradigmas/scalaproject/)
[debug] > Exec(idea-shell, None, None)
